<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on bnm 3000</title>
    <link>https://bnm3k.github.io/tags/python/</link>
    <description>Recent content in Python on bnm 3000</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 04 Apr 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://bnm3k.github.io/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>DuckDB JIT Compiled UDFs with Numba</title>
      <link>https://bnm3k.github.io/blog/duckdb-jit-udfs-numba/</link>
      <pubDate>Thu, 04 Apr 2024 00:00:00 +0000</pubDate>
      <guid>https://bnm3k.github.io/blog/duckdb-jit-udfs-numba/</guid>
      <description>JIT compiling your vectorized UDFs with Numba. Plus pure SQL is plenty fast if you can figure out how to write it</description>
    </item>
    <item>
      <title>Vectorized DuckDB UDFs with Rust and Python FFI</title>
      <link>https://bnm3k.github.io/blog/rust-duckdb-py-udf/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://bnm3k.github.io/blog/rust-duckdb-py-udf/</guid>
      <description>Implementing vectorized UDFs in Rust that you can use in DuckDB, with a little help from Arrow</description>
    </item>
    <item>
      <title>Programmatically creating a DuckDB table from an Arrow schema</title>
      <link>https://bnm3k.github.io/blog/duckdb-arrow-data-types/</link>
      <pubDate>Fri, 16 Jun 2023 00:00:00 +0000</pubDate>
      <guid>https://bnm3k.github.io/blog/duckdb-arrow-data-types/</guid>
      <description>PyArrow lets you create an empty table. Use that instead of custom mappings to create a DuckDB schema.</description>
    </item>
  </channel>
</rss>
